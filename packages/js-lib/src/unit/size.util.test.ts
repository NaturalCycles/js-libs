import { expect, test } from 'vitest'
import { _gb, _hb, _hc, _kb, _mb } from './size.util.js'

test('_hb', () => {
  expect(_hb()).toBe('0 byte(s)')
  expect(_hb(0)).toBe('0 byte(s)')
  expect(_hb(500)).toBe('0.49 Kb')
  expect(_hb(1000)).toBe('1 Kb')
  expect(_hb(1024)).toBe('1 Kb')
  expect(_hb(1025)).toBe('1 Kb')
  expect(_hb(1500)).toBe('1 Kb')
  expect(_hb(15_000)).toBe('15 Kb')
  expect(_hb(1036541)).toMatchInlineSnapshot(`"1 Mb"`)
  expect(_hb(1024 ** 2 - 1)).toBe('1 Mb')
  expect(_hb(1024 ** 2)).toBe('1 Mb')
  expect(_hb(1024 ** 3)).toBe('1.00 Gb')
  expect(_kb(1000)).toBe(1)
  expect(_mb(1024 ** 2)).toBe(1)
  expect(_gb(1024 ** 3)).toBe(1)
})

test('_hb log', () => {
  const map = new Map<number, string>()
  for (let n = 2; n < 10 ** 15; n *= 1.3) {
    map.set(Math.round(n), _hb(n))
  }

  expect(map).toMatchInlineSnapshot(`
    Map {
      2 => "2 byte(s)",
      3 => "3 byte(s)",
      4 => "4 byte(s)",
      6 => "6 byte(s)",
      7 => "7 byte(s)",
      10 => "10 byte(s)",
      13 => "13 byte(s)",
      16 => "16 byte(s)",
      21 => "21 byte(s)",
      28 => "28 byte(s)",
      36 => "36 byte(s)",
      47 => "47 byte(s)",
      61 => "61 byte(s)",
      79 => "79 byte(s)",
      102 => "0.10 Kb",
      133 => "0.13 Kb",
      173 => "0.17 Kb",
      225 => "0.22 Kb",
      292 => "0.29 Kb",
      380 => "0.37 Kb",
      494 => "0.48 Kb",
      642 => "0.63 Kb",
      835 => "0.82 Kb",
      1086 => "1 Kb",
      1411 => "1 Kb",
      1835 => "2 Kb",
      2385 => "2 Kb",
      3101 => "3 Kb",
      4031 => "4 Kb",
      5240 => "5 Kb",
      6812 => "7 Kb",
      8856 => "9 Kb",
      11512 => "11 Kb",
      14966 => "15 Kb",
      19456 => "19 Kb",
      25292 => "25 Kb",
      32880 => "32 Kb",
      42744 => "42 Kb",
      55567 => "54 Kb",
      72238 => "71 Kb",
      93909 => "92 Kb",
      122082 => "119 Kb",
      158706 => "155 Kb",
      206318 => "201 Kb",
      268214 => "262 Kb",
      348678 => "341 Kb",
      453281 => "443 Kb",
      589265 => "575 Kb",
      766045 => "748 Kb",
      995858 => "1 Mb",
      1294616 => "1 Mb",
      1683001 => "2 Mb",
      2187901 => "2 Mb",
      2844271 => "3 Mb",
      3697553 => "4 Mb",
      4806819 => "5 Mb",
      6248864 => "6 Mb",
      8123523 => "8 Mb",
      10560580 => "10 Mb",
      13728754 => "13 Mb",
      17847381 => "17 Mb",
      23201595 => "22 Mb",
      30162073 => "29 Mb",
      39210695 => "37 Mb",
      50973904 => "49 Mb",
      66266075 => "63 Mb",
      86145898 => "82 Mb",
      111989667 => "107 Mb",
      145586567 => "139 Mb",
      189262537 => "180 Mb",
      246041298 => "235 Mb",
      319853687 => "305 Mb",
      415809794 => "397 Mb",
      540552732 => "516 Mb",
      702718551 => "670 Mb",
      913534116 => "871 Mb",
      1187594351 => "1.11 Gb",
      1543872657 => "1.44 Gb",
      2007034454 => "1.87 Gb",
      2609144790 => "2.43 Gb",
      3391888227 => "3.16 Gb",
      4409454695 => "4.11 Gb",
      5732291104 => "5.34 Gb",
      7451978435 => "6.94 Gb",
      9687571966 => "9.02 Gb",
      12593843555 => "11.73 Gb",
      16371996622 => "15.25 Gb",
      21283595608 => "19.82 Gb",
      27668674291 => "25.77 Gb",
      35969276578 => "33.50 Gb",
      46760059551 => "43.55 Gb",
      60788077417 => "56.61 Gb",
      79024500642 => "73.60 Gb",
      102731850834 => "96 Gb",
      133551406084 => "124 Gb",
      173616827910 => "162 Gb",
      225701876283 => "210 Gb",
      293412439168 => "273 Gb",
      381436170918 => "355 Gb",
      495867022193 => "462 Gb",
      644627128851 => "600 Gb",
      838015267507 => "780 Gb",
      1089419847758 => "0.99 Tb",
      1416245802086 => "1.29 Tb",
      1841119542712 => "1.67 Tb",
      2393455405525 => "2.18 Tb",
      3111492027183 => "2.83 Tb",
      4044939635338 => "3.68 Tb",
      5258421525939 => "4.78 Tb",
      6835947983721 => "6.22 Tb",
      8886732378837 => "8.08 Tb",
      11552752092488 => "10.51 Tb",
      15018577720235 => "13.66 Tb",
      19524151036305 => "17.76 Tb",
      25381396347197 => "23.08 Tb",
      32995815251356 => "30.01 Tb",
      42894559826763 => "39.01 Tb",
      55762927774791 => "50.72 Tb",
      72491806107229 => "65.93 Tb",
      94239347939397 => "85.71 Tb",
      122511152321216 => "111.42 Tb",
      159264498017581 => "144.85 Tb",
      207043847422856 => "188.31 Tb",
      269157001649712 => "244.80 Tb",
      349904102144626 => "318.24 Tb",
      454875332788014 => "413.71 Tb",
      591337932624418 => "537.82 Tb",
      768739312411744 => "699.16 Tb",
      999361106135267 => "908.91 Tb",
    }
  `)
})

test('_hc log', () => {
  const map = new Map<number, string>()
  for (let n = 2; n < 10 ** 15; n *= 1.3) {
    map.set(Math.round(n), _hc(n))
  }

  expect(map).toMatchInlineSnapshot(`
    Map {
      2 => "2",
      3 => "3",
      4 => "4",
      6 => "6",
      7 => "7",
      10 => "10",
      13 => "13",
      16 => "16",
      21 => "21",
      28 => "28",
      36 => "36",
      47 => "47",
      61 => "61",
      79 => "79",
      102 => "102",
      133 => "133",
      173 => "173",
      225 => "225",
      292 => "292",
      380 => "380",
      494 => "494",
      642 => "642",
      835 => "835",
      1086 => "1086",
      1411 => "1411",
      1835 => "1835",
      2385 => "2385",
      3101 => "3101",
      4031 => "4031",
      5240 => "5240",
      6812 => "6812",
      8856 => "8856",
      11512 => "12 K",
      14966 => "15 K",
      19456 => "19 K",
      25292 => "25 K",
      32880 => "33 K",
      42744 => "43 K",
      55567 => "56 K",
      72238 => "72 K",
      93909 => "94 K",
      122082 => "122 K",
      158706 => "159 K",
      206318 => "206 K",
      268214 => "268 K",
      348678 => "349 K",
      453281 => "453 K",
      589265 => "589 K",
      766045 => "766 K",
      995858 => "996 K",
      1294616 => "1 M",
      1683001 => "2 M",
      2187901 => "2 M",
      2844271 => "3 M",
      3697553 => "4 M",
      4806819 => "5 M",
      6248864 => "6 M",
      8123523 => "8 M",
      10560580 => "11 M",
      13728754 => "14 M",
      17847381 => "18 M",
      23201595 => "23 M",
      30162073 => "30 M",
      39210695 => "39 M",
      50973904 => "51 M",
      66266075 => "66 M",
      86145898 => "86 M",
      111989667 => "112 M",
      145586567 => "146 M",
      189262537 => "189 M",
      246041298 => "246 M",
      319853687 => "320 M",
      415809794 => "416 M",
      540552732 => "541 M",
      702718551 => "703 M",
      913534116 => "914 M",
      1187594351 => "1 B",
      1543872657 => "2 B",
      2007034454 => "2 B",
      2609144790 => "3 B",
      3391888227 => "3 B",
      4409454695 => "4 B",
      5732291104 => "6 B",
      7451978435 => "7 B",
      9687571966 => "10 B",
      12593843555 => "13 B",
      16371996622 => "16 B",
      21283595608 => "21 B",
      27668674291 => "28 B",
      35969276578 => "36 B",
      46760059551 => "47 B",
      60788077417 => "61 B",
      79024500642 => "79 B",
      102731850834 => "103 B",
      133551406084 => "134 B",
      173616827910 => "174 B",
      225701876283 => "226 B",
      293412439168 => "293 B",
      381436170918 => "381 B",
      495867022193 => "496 B",
      644627128851 => "645 B",
      838015267507 => "838 B",
      1089419847758 => "1 T",
      1416245802086 => "1 T",
      1841119542712 => "2 T",
      2393455405525 => "2 T",
      3111492027183 => "3 T",
      4044939635338 => "4 T",
      5258421525939 => "5 T",
      6835947983721 => "7 T",
      8886732378837 => "9 T",
      11552752092488 => "12 T",
      15018577720235 => "15 T",
      19524151036305 => "20 T",
      25381396347197 => "25 T",
      32995815251356 => "33 T",
      42894559826763 => "43 T",
      55762927774791 => "56 T",
      72491806107229 => "72 T",
      94239347939397 => "94 T",
      122511152321216 => "123 T",
      159264498017581 => "159 T",
      207043847422856 => "207 T",
      269157001649712 => "269 T",
      349904102144626 => "350 T",
      454875332788014 => "455 T",
      591337932624418 => "591 T",
      768739312411744 => "769 T",
      999361106135267 => "999 T",
    }
  `)

  expect([0, 0.1, 0.01, 0.15, 0.001, 0.00045, 0.00000000123].map(_hc)).toMatchInlineSnapshot(`
    [
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
    ]
  `)
})
